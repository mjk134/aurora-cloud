generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
}

model Users {
  user_id          String            @id @default(cuid())
  username         String            @unique
  password_hash    String
  created_at       DateTime          @default(now())
  is_oauth         Boolean           @default(false)
  discord_storage  DiscordStorage[]
  files            File[]
  folders          Folder[]
  Session          Session[]
  telegram_storage TelegramStorage[]
  youtube_storage  YouTubeStorage[]
  parents          Parent[]
}


model DiscordStorage {
  chunk_id    String   @id @default(cuid())
  user_id     String
  file_id     String
  channel_id  String
  chunk_index Int
  chunk_url   String
  message_id  String
  created_at  DateTime @default(now())
  is_text     Boolean  @default(false)
  files       File     @relation(fields: [file_id], references: [file_id])
  users       Users    @relation(fields: [user_id], references: [user_id])
}

model Session {
  token   String   @id @default(cuid())
  user_id String
  expires DateTime
  users   Users    @relation(fields: [user_id], references: [user_id])
}

model TelegramStorage {
  chunk_id    String   @id @default(cuid())
  user_id     String
  file_id     String
  chunk_index Int
  tg_file_id  String
  created_at  DateTime @default(now())
  files       File     @relation(fields: [file_id], references: [file_id])
  users       Users    @relation(fields: [user_id], references: [user_id])
}

model YouTubeStorage {
  chunk_id    String   @id @default(cuid())
  user_id     String
  video_id    String
  file_id     String
  chunk_index Int
  url         String
  created_at  DateTime @default(now())
  files       File     @relation(fields: [file_id], references: [file_id])
  users       Users    @relation(fields: [user_id], references: [user_id])
}

model File {
  file_id          String            @id @default(cuid())
  user_id          String
  file_name        String
  file_type        String
  file_size        Int
  key              Bytes
  iv               Bytes
  auth_tag         Bytes
  created_at       DateTime          @default(now())
  discord_storage  DiscordStorage[]
  users            Users             @relation(fields: [user_id], references: [user_id])
  telegram_storage TelegramStorage[]
  youtube_storage  YouTubeStorage[]
}

model Folder {
  folder_id String   @id @default(cuid())
  user_id   String
  name String
  users     Users    @relation(fields: [user_id], references: [user_id])
  parents   Parent[]
}

model Parent {
  parent_id String @id @default(cuid())
  folder_id String
  file_id   String
  user_id   String
  users     Users  @relation(fields: [user_id], references: [user_id])
  folders   Folder @relation(fields: [folder_id], references: [folder_id])
}
